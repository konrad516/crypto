aes_s_box = (
    0x63, 0x7C, 0x77, 0x7B, 0xF2, 0x6B, 0x6F, 0xC5, 0x30, 0x01, 0x67, 0x2B, 0xFE, 0xD7, 0xAB, 0x76,
    0xCA, 0x82, 0xC9, 0x7D, 0xFA, 0x59, 0x47, 0xF0, 0xAD, 0xD4, 0xA2, 0xAF, 0x9C, 0xA4, 0x72, 0xC0,
    0xB7, 0xFD, 0x93, 0x26, 0x36, 0x3F, 0xF7, 0xCC, 0x34, 0xA5, 0xE5, 0xF1, 0x71, 0xD8, 0x31, 0x15,
    0x04, 0xC7, 0x23, 0xC3, 0x18, 0x96, 0x05, 0x9A, 0x07, 0x12, 0x80, 0xE2, 0xEB, 0x27, 0xB2, 0x75,
    0x09, 0x83, 0x2C, 0x1A, 0x1B, 0x6E, 0x5A, 0xA0, 0x52, 0x3B, 0xD6, 0xB3, 0x29, 0xE3, 0x2F, 0x84,
    0x53, 0xD1, 0x00, 0xED, 0x20, 0xFC, 0xB1, 0x5B, 0x6A, 0xCB, 0xBE, 0x39, 0x4A, 0x4C, 0x58, 0xCF,
    0xD0, 0xEF, 0xAA, 0xFB, 0x43, 0x4D, 0x33, 0x85, 0x45, 0xF9, 0x02, 0x7F, 0x50, 0x3C, 0x9F, 0xA8,
    0x51, 0xA3, 0x40, 0x8F, 0x92, 0x9D, 0x38, 0xF5, 0xBC, 0xB6, 0xDA, 0x21, 0x10, 0xFF, 0xF3, 0xD2,
    0xCD, 0x0C, 0x13, 0xEC, 0x5F, 0x97, 0x44, 0x17, 0xC4, 0xA7, 0x7E, 0x3D, 0x64, 0x5D, 0x19, 0x73,
    0x60, 0x81, 0x4F, 0xDC, 0x22, 0x2A, 0x90, 0x88, 0x46, 0xEE, 0xB8, 0x14, 0xDE, 0x5E, 0x0B, 0xDB,
    0xE0, 0x32, 0x3A, 0x0A, 0x49, 0x06, 0x24, 0x5C, 0xC2, 0xD3, 0xAC, 0x62, 0x91, 0x95, 0xE4, 0x79,
    0xE7, 0xC8, 0x37, 0x6D, 0x8D, 0xD5, 0x4E, 0xA9, 0x6C, 0x56, 0xF4, 0xEA, 0x65, 0x7A, 0xAE, 0x08,
    0xBA, 0x78, 0x25, 0x2E, 0x1C, 0xA6, 0xB4, 0xC6, 0xE8, 0xDD, 0x74, 0x1F, 0x4B, 0xBD, 0x8B, 0x8A,
    0x70, 0x3E, 0xB5, 0x66, 0x48, 0x03, 0xF6, 0x0E, 0x61, 0x35, 0x57, 0xB9, 0x86, 0xC1, 0x1D, 0x9E,
    0xE1, 0xF8, 0x98, 0x11, 0x69, 0xD9, 0x8E, 0x94, 0x9B, 0x1E, 0x87, 0xE9, 0xCE, 0x55, 0x28, 0xDF,
    0x8C, 0xA1, 0x89, 0x0D, 0xBF, 0xE6, 0x42, 0x68, 0x41, 0x99, 0x2D, 0x0F, 0xB0, 0x54, 0xBB, 0x16,
)

aes_inv_s_box = (
    0x52, 0x09, 0x6A, 0xD5, 0x30, 0x36, 0xA5, 0x38, 0xBF, 0x40, 0xA3, 0x9E, 0x81, 0xF3, 0xD7, 0xFB,
    0x7C, 0xE3, 0x39, 0x82, 0x9B, 0x2F, 0xFF, 0x87, 0x34, 0x8E, 0x43, 0x44, 0xC4, 0xDE, 0xE9, 0xCB,
    0x54, 0x7B, 0x94, 0x32, 0xA6, 0xC2, 0x23, 0x3D, 0xEE, 0x4C, 0x95, 0x0B, 0x42, 0xFA, 0xC3, 0x4E,
    0x08, 0x2E, 0xA1, 0x66, 0x28, 0xD9, 0x24, 0xB2, 0x76, 0x5B, 0xA2, 0x49, 0x6D, 0x8B, 0xD1, 0x25,
    0x72, 0xF8, 0xF6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xD4, 0xA4, 0x5C, 0xCC, 0x5D, 0x65, 0xB6, 0x92,
    0x6C, 0x70, 0x48, 0x50, 0xFD, 0xED, 0xB9, 0xDA, 0x5E, 0x15, 0x46, 0x57, 0xA7, 0x8D, 0x9D, 0x84,
    0x90, 0xD8, 0xAB, 0x00, 0x8C, 0xBC, 0xD3, 0x0A, 0xF7, 0xE4, 0x58, 0x05, 0xB8, 0xB3, 0x45, 0x06,
    0xD0, 0x2C, 0x1E, 0x8F, 0xCA, 0x3F, 0x0F, 0x02, 0xC1, 0xAF, 0xBD, 0x03, 0x01, 0x13, 0x8A, 0x6B,
    0x3A, 0x91, 0x11, 0x41, 0x4F, 0x67, 0xDC, 0xEA, 0x97, 0xF2, 0xCF, 0xCE, 0xF0, 0xB4, 0xE6, 0x73,
    0x96, 0xAC, 0x74, 0x22, 0xE7, 0xAD, 0x35, 0x85, 0xE2, 0xF9, 0x37, 0xE8, 0x1C, 0x75, 0xDF, 0x6E,
    0x47, 0xF1, 0x1A, 0x71, 0x1D, 0x29, 0xC5, 0x89, 0x6F, 0xB7, 0x62, 0x0E, 0xAA, 0x18, 0xBE, 0x1B,
    0xFC, 0x56, 0x3E, 0x4B, 0xC6, 0xD2, 0x79, 0x20, 0x9A, 0xDB, 0xC0, 0xFE, 0x78, 0xCD, 0x5A, 0xF4,
    0x1F, 0xDD, 0xA8, 0x33, 0x88, 0x07, 0xC7, 0x31, 0xB1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xEC, 0x5F,
    0x60, 0x51, 0x7F, 0xA9, 0x19, 0xB5, 0x4A, 0x0D, 0x2D, 0xE5, 0x7A, 0x9F, 0x93, 0xC9, 0x9C, 0xEF,
    0xA0, 0xE0, 0x3B, 0x4D, 0xAE, 0x2A, 0xF5, 0xB0, 0xC8, 0xEB, 0xBB, 0x3C, 0x83, 0x53, 0x99, 0x61,
    0x17, 0x2B, 0x04, 0x7E, 0xBA, 0x77, 0xD6, 0x26, 0xE1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0C, 0x7D,
)

rcon = (
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb
)


def sub_bytes(state):
    """sub bytes transformation"""
    for i in range(4):
        for j in range(4):
            state[i][j] = aes_s_box[state[i][j]]
    return state


def sub_bytes_inv(state):
    """inverse sub bytes transformation"""
    for i in range(4):
        for j in range(4):
            state[i][j] = aes_inv_s_box[state[i][j]]
    return state


def shift_rows(state):
    """shifts each row of 4x4 matrix (left)"""
    state[0][1], state[1][1], state[2][1], state[3][1] = state[1][1], state[2][1], state[3][1], state[0][1]
    state[0][2], state[1][2], state[2][2], state[3][2] = state[2][2], state[3][2], state[0][2], state[1][2]
    state[0][3], state[1][3], state[2][3], state[3][3] = state[3][3], state[0][3], state[1][3], state[2][3]
    return state


def shift_rows_inv(state):
    """shifts each row of 4x4 matrix (right)"""
    state[0][1], state[1][1], state[2][1], state[3][1] = state[3][1], state[0][1], state[1][1], state[2][1]
    state[0][2], state[1][2], state[2][2], state[3][2] = state[2][2], state[3][2], state[0][2], state[1][2]
    state[0][3], state[1][3], state[2][3], state[3][3] = state[1][3], state[2][3], state[3][3], state[0][3]
    return state


def add_round_key(state, round_key):
    """set all index to xor of state and round_key"""
    for i in range(4):
        for j in range(4):
            state[i][j] ^= round_key[i][j]
    return state


def galios_multi(a, b):
    """ Galois Field (256) Multiplication of two Bytes"""
    p = 0
    for i in range(8):
        if (b & 1 != 0):
            p ^= a
        hi_bit_set = (a & 0x80) != 0
        a <<= 1
        if (hi_bit_set):
            a ^= 0x1B  # x^8 + x^4 + x^3 + x + 1
        b >>= 1
    return p % 256


def mix_single_column(column):
    """ mix column operation using Rijndael cipher"""
    # copy arr column to column_temp
    column_temp = column.copy()

    column[0] = (galios_multi(2, column_temp[0]) ^
                 galios_multi(3, column_temp[1]) ^ column_temp[2] ^ column_temp[3])
    column[1] = (column_temp[0] ^ galios_multi(2, column_temp[1]) ^
                 galios_multi(3, column_temp[2]) ^ column_temp[3])
    column[2] = (column_temp[0] ^ column_temp[1] ^ galios_multi(
                 2, column_temp[2]) ^ galios_multi(3, column_temp[3]))
    column[3] = (galios_multi(3, column_temp[0]) ^ column_temp[1]
                 ^ column_temp[2] ^ galios_multi(2, column_temp[3]))
    return column


def mix_one_column_inv(column):
    """inverse mix column operation"""
    mix_single_column(column)
    mix_single_column(column)
    mix_single_column(column)
    return column


def mix_columns(state):
    """mix all collumns using Rijndael cipher"""
    for i in range(4):
        mix_single_column(state[i])
    return state


def mix_columns_inv(state):
    """inverse mix all collumns using Rijndael cipher"""
    for i in range(4):
        mix_one_column_inv(state[i])
    return state


def key_expansion_core(input, i):
    """sets input to rotation to the left and xor with rcon"""
    temp = []
    input.append(input.pop(0))
    temp.append(aes_s_box[input[0]])
    temp.append(aes_s_box[input[1]])
    temp.append(aes_s_box[input[2]])
    temp.append(aes_s_box[input[3]])
    temp[0] = temp[0] ^ rcon[i]
    return temp


def expand_key(key):
    """take 16 bytes key and expand it to 176 bytes"""
    expandend_key = []

    for i in range(16):
        expandend_key.append(key[i])

    bytes_generated = 16
    rcon_iteration = 1
    temp = [0, 0, 0, 0]

    # generate 160 bytes
    while (bytes_generated < 176):
        for i in range(4):
            temp[i] = expandend_key[i + bytes_generated - 4]

        if (bytes_generated % 16 == 0):
            temp = key_expansion_core(temp, rcon_iteration)
            rcon_iteration += 1

        for i in range(4):
            expandend_key.append(
                ((expandend_key[bytes_generated - 16]) ^ (temp[i])))
            bytes_generated += 1

    key_columns = bytes_to_matrix(expandend_key)
    result = []
    for i in range(len(key_columns)):
        result.append(bytes(key_columns[i]))
    return [result[4*i: 4*(i+1)] for i in range(len(result) // 4)]


def pad(plaintext, block_size=16):
    """Adds a number bytes for plaintext to be multiple of 16 using PKCS#7 padding"""
    length = block_size - (len(plaintext) % block_size)
    plaintext += bytes([length])*length
    return plaintext


def unpad(plaintext):
    """Removes padding from plaintext"""
    padding_len = plaintext[-1]
    return plaintext[:-padding_len]


def split_blocks(plaintext):
    """split plaintext into 16 bytes blocks"""
    return [plaintext[i:i+16] for i in range(0, len(plaintext), 16)]


def bytes_to_matrix(text):
    """convert bytes into 4 x a 2D array"""
    return [list(text[i:i+4]) for i in range(0, len(text), 4)]


def matrix_to_bytes(matrix):
    """Convert 2D array into byte array"""
    temp = sum(matrix, [])
    return bytearray(temp)


def aes_rounds(plaintext, expanded_key):
    """enrypts plaintext using AES-128 enryption with given expanded_key"""
    add_round_key(plaintext, expanded_key[0])
    for i in range(9):
        plaintext = sub_bytes(plaintext)
        plaintext = shift_rows(plaintext)
        plaintext = mix_columns(plaintext)
        plaintext = add_round_key(plaintext, expanded_key[i+1])
    plaintext = sub_bytes(plaintext)
    plaintext = shift_rows(plaintext)
    plaintext = add_round_key(plaintext, expanded_key[-1])
    return plaintext


def aes_rounds_inv(ciphertext, expanded_key):
    """decytps ciphertext using AES-128 enryption with given expanded_key"""
    ciphertext = add_round_key(ciphertext, expanded_key[-1])
    ciphertext = shift_rows_inv(ciphertext)
    ciphertext = sub_bytes_inv(ciphertext)
    for i in range(9, 0, -1):
        ciphertext = add_round_key(ciphertext, expanded_key[i])
        ciphertext = mix_columns_inv(ciphertext)
        ciphertext = shift_rows_inv(ciphertext)
        ciphertext = sub_bytes_inv(ciphertext)
    ciphertext = add_round_key(ciphertext, expanded_key[0])
    return ciphertext


def aes_enrypt(plaintext, expanded_key):
    """encrypt single block using AES-128 enryption with given expanded_key"""
    plaintext = bytes_to_matrix(plaintext)
    plaintext = aes_rounds(plaintext, expanded_key)
    plaintext = matrix_to_bytes(plaintext)
    return plaintext


def aes_decrypt(ciphertext, expanded_key):
    """decrypt single block using AES-128 enryption with given expanded_key"""
    ciphertext = bytes_to_matrix(ciphertext)
    ciphertext = aes_rounds_inv(ciphertext, expanded_key)
    ciphertext = matrix_to_bytes(ciphertext)
    return ciphertext


def encrypt(key, iv, plaintext):
    """CBC AES-128 enryption"""
    plaintext = pad(plaintext)
    result = []
    previous = iv
    for plaintext_block in split_blocks(plaintext):
        """xor previous block with current block"""
        temp = bytes(i ^ j for i, j in zip(plaintext_block, previous))
        block = aes_enrypt(temp, key)
        result.append(block)
        previous = block
    return b''.join(result)


def decrypt(key, iv, ciphertext):
    """CBC AES-128 decryption"""
    result = []
    previous = iv
    for ciphertext_block in split_blocks(ciphertext):
        temp = bytes(i ^ j for i, j in zip(
            previous, aes_decrypt(ciphertext_block, key)))
        result.append(temp)
        previous = ciphertext_block
    result = unpad(b''.join(result))
    return result
